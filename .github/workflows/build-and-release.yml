name: Build and Release ScreenQA

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: ''
        type: string

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      run: |
        if (Test-Path "ScreenQA.spec") {
            python -m PyInstaller ScreenQA.spec --clean
        } else {
            python -m PyInstaller --onefile --windowed --name "ScreenQA" main.py
        }
        
    - name: Test executable
      run: |
        if (Test-Path "dist/ScreenQA.exe") {
            Write-Host "✅ Build successful - ScreenQA.exe created"
            Get-Item "dist/ScreenQA.exe" | Select-Object Name, Length
        } else {
            Write-Error "❌ Build failed - executable not found"
            exit 1
        }
        
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: ScreenQA-Windows
        path: dist/ScreenQA.exe
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      run: |
        if [ -f "ScreenQA.spec" ]; then
            python -m PyInstaller ScreenQA.spec --clean
        else
            python -m PyInstaller --onefile --name "ScreenQA" main.py
        fi
        
    - name: Test executable
      run: |
        if [ -f "dist/ScreenQA" ]; then
            echo "✅ Build successful - ScreenQA binary created"
            ls -la dist/ScreenQA
        else
            echo "❌ Build failed - executable not found"
            exit 1
        fi
        
    - name: Upload Linux executable
      uses: actions/upload-artifact@v4
      with:
        name: ScreenQA-Linux
        path: dist/ScreenQA
        retention-days: 30

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Windows executable
      uses: actions/download-artifact@v4
      with:
        name: ScreenQA-Windows
        path: ./artifacts/
        
    - name: Download Linux executable
      uses: actions/download-artifact@v4
      with:
        name: ScreenQA-Linux
        path: ./artifacts/
        
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ "${{ inputs.release_version }}" != "" ]]; then
          VERSION="${{ inputs.release_version }}"
        else
          VERSION="development-$(date +%Y%m%d-%H%M%S)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "ScreenQA ${{ steps.version.outputs.version }}"
        files: |
          ./artifacts/ScreenQA.exe
          ./artifacts/ScreenQA
        body: |
          ## ScreenQA Release ${{ steps.version.outputs.version }}
          
          ### Downloads
          - **Windows**: ScreenQA.exe (double-click to run)
          - **Linux**: ScreenQA (run with `./ScreenQA`)
          
          ### Requirements
          - Chrome browser must be installed on the target machine
          - No Python installation required
          
          ### New in this release
          - Cross-device screenshot testing
          - Resizable UI with drag bars
          - Multiple screenshot modes (Full Page, Visible Window, Auto)
          - Mouse wheel scrolling support
          - Professional QA reporting tools
        generate_release_notes: true
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}