name: Build and Release ScreenQA

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: ''
        type: string

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      run: |
        if (Test-Path "ScreenQA.spec") {
            python -m PyInstaller ScreenQA.spec --clean
        } else {
            python -m PyInstaller --onefile --windowed --name "ScreenQA" main.py
        }
        
    - name: Test executable
      run: |
        if (Test-Path "dist/ScreenQA.exe") {
            Write-Host "‚úÖ Build successful - ScreenQA.exe created"
            Get-Item "dist/ScreenQA.exe" | Select-Object Name, Length
        } else {
            Write-Error "‚ùå Build failed - executable not found"
            exit 1
        }
        
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: ScreenQA-Windows
        path: dist/ScreenQA.exe
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      run: |
        if [ -f "ScreenQA.spec" ]; then
            python -m PyInstaller ScreenQA.spec --clean
        else
            python -m PyInstaller --onefile --name "ScreenQA" main.py
        fi
        
    - name: Test executable
      run: |
        if [ -f "dist/ScreenQA" ]; then
            echo "‚úÖ Build successful - ScreenQA binary created"
            ls -la dist/ScreenQA
        else
            echo "‚ùå Build failed - executable not found"
            exit 1
        fi
        
    - name: Upload Linux executable
      uses: actions/upload-artifact@v4
      with:
        name: ScreenQA-Linux
        path: dist/ScreenQA
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        # Install any macOS-specific dependencies if needed
        brew install --cask chromedriver || true
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        # Install macOS-specific packages if needed
        pip install pyobjc-framework-Cocoa || true
        
    - name: Build executable
      run: |
        if [ -f "ScreenQA-macOS.spec" ]; then
            # Use macOS-specific spec file (no additional options needed)
            python -m PyInstaller ScreenQA-macOS.spec --clean
        elif [ -f "ScreenQA.spec" ]; then
            # Fallback to regular spec file (no additional options needed)
            python -m PyInstaller ScreenQA.spec --clean
        else
            # Create with PyInstaller defaults
            python -m PyInstaller --onefile --windowed --name "ScreenQA" main.py
        fi
        
    - name: Test executable
      run: |
        if [ -d "dist/ScreenQA.app" ]; then
            echo "‚úÖ Build successful - ScreenQA.app bundle created"
            ls -la dist/ScreenQA.app/
            ls -la dist/ScreenQA.app/Contents/MacOS/
        elif [ -f "dist/ScreenQA" ]; then
            echo "‚úÖ Build successful - ScreenQA binary created"
            ls -la dist/ScreenQA
            file dist/ScreenQA
        else
            echo "‚ùå Build failed - executable not found"
            ls -la dist/
            exit 1
        fi
        
    - name: Create DMG for distribution
      run: |
        if [ -d "dist/ScreenQA.app" ]; then
            # Create DMG from app bundle
            hdiutil create -volname "ScreenQA" -srcfolder "dist/ScreenQA.app" -ov -format UDZO "dist/ScreenQA-macOS.dmg"
            echo "‚úÖ macOS DMG created from app bundle"
        else
            # Create simple folder structure for DMG
            mkdir -p "dist/ScreenQA-Package"
            if [ -f "dist/ScreenQA" ]; then
                cp "dist/ScreenQA" "dist/ScreenQA-Package/"
                echo "ScreenQA - Website Screenshot Testing Tool" > "dist/ScreenQA-Package/README.txt"
                echo "" >> "dist/ScreenQA-Package/README.txt"
                echo "To run ScreenQA:" >> "dist/ScreenQA-Package/README.txt"
                echo "1. Open Terminal" >> "dist/ScreenQA-Package/README.txt"
                echo "2. Navigate to this folder" >> "dist/ScreenQA-Package/README.txt"
                echo "3. Run: ./ScreenQA" >> "dist/ScreenQA-Package/README.txt"
                hdiutil create -volname "ScreenQA" -srcfolder "dist/ScreenQA-Package" -ov -format UDZO "dist/ScreenQA-macOS.dmg"
                echo "‚úÖ macOS DMG created from binary"
            fi
        fi
        
        ls -la dist/
        
    - name: Upload macOS executable
      uses: actions/upload-artifact@v4
      with:
        name: ScreenQA-macOS
        path: |
          dist/ScreenQA.app
          dist/ScreenQA-macOS.dmg
        retention-days: 30

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && inputs.create_release) || github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Windows executable
      uses: actions/download-artifact@v4
      with:
        name: ScreenQA-Windows
        path: ./artifacts/
        
    - name: Download Linux executable
      uses: actions/download-artifact@v4
      with:
        name: ScreenQA-Linux
        path: ./artifacts/
        
    - name: Download macOS executable
      uses: actions/download-artifact@v4
      with:
        name: ScreenQA-macOS
        path: ./artifacts/
        
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ "${{ inputs.release_version }}" != "" ]]; then
          VERSION="${{ inputs.release_version }}"
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          VERSION="v2.0.$(date +%Y%m%d.%H%M%S)"
        else
          VERSION="development-$(date +%Y%m%d-%H%M%S)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "ScreenQA ${{ steps.version.outputs.version }}"
        files: |
          ./artifacts/ScreenQA.exe
          ./artifacts/ScreenQA
          ./artifacts/ScreenQA-macOS.dmg
        body: |
          ## ScreenQA Release ${{ steps.version.outputs.version }}
          
          ### Downloads
          - **Windows**: ScreenQA.exe (double-click to run)
          - **Linux**: ScreenQA (run with `./ScreenQA`)
          - **macOS**: ScreenQA-macOS.dmg (drag to Applications folder)
          
          ### Requirements
          - Chrome browser must be installed on the target machine
          - No Python installation required
          - **macOS**: macOS 10.14 (Mojave) or later
          
          ### Latest Features
          - **üé® Modern UI Design**: Professional 3-column device layout
          - **‚ö° Viewport Mode Default**: Faster screenshot capture
          - **üìä Real-Time Logging**: Color-coded logging with timestamps
          - **üë®‚Äçüíª Developer Attribution**: Professional About page with GitHub integration
          - **üîÑ Streamlined Interface**: Cleaned up unnecessary sections
          - **üì∏ UI Screenshots**: Updated README with interface previews
          - **üñ•Ô∏è Cross-Platform Builds**: Automated Windows, Linux, and macOS executables
          
          ### Core Features
          - Cross-device screenshot testing (15+ device configurations)
          - Multiple screenshot modes (Full Page, Viewport, Auto)
          - Real-time progress tracking and logging
          - Professional reporting and gallery features
          - Resizable UI with drag-to-resize panels
        generate_release_notes: true
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}